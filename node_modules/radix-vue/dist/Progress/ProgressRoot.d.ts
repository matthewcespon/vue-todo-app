import { type PrimitiveProps } from '../Primitive';
import type { ComputedRef, InjectionKey, Ref } from 'vue';
export interface ProgressRootProps extends PrimitiveProps {
    modelValue?: number | null;
    max?: number;
    getValueLabel?: (value: number, max: number) => string;
}
export type ProgressRootEmits = {
    'update:modelValue': [value: string[] | undefined];
    'update:max': [value: number];
};
export declare const PROGRESS_INJECTION_KEY: InjectionKey<ProgressProvideValue>;
interface ProgressProvideValue {
    modelValue?: Readonly<Ref<ProgressRootProps['modelValue']>>;
    max: Readonly<Ref<number>>;
    progressState: ComputedRef<ProgressState>;
}
export type ProgressState = 'indeterminate' | 'loading' | 'complete';
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    asChild: {
        type: import("vue").PropType<boolean>;
    };
    as: {
        type: import("vue").PropType<import('../Primitive').AsTag>;
    };
    modelValue: {
        type: import("vue").PropType<number | null>;
    };
    max: {
        type: import("vue").PropType<number>;
        default: number;
    };
    getValueLabel: {
        type: import("vue").PropType<(value: number, max: number) => string>;
        default: (value: number, max: number) => string;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    'update:modelValue': (value: string[] | undefined) => void;
    'update:max': (value: number) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    asChild: {
        type: import("vue").PropType<boolean>;
    };
    as: {
        type: import("vue").PropType<import('../Primitive').AsTag>;
    };
    modelValue: {
        type: import("vue").PropType<number | null>;
    };
    max: {
        type: import("vue").PropType<number>;
        default: number;
    };
    getValueLabel: {
        type: import("vue").PropType<(value: number, max: number) => string>;
        default: (value: number, max: number) => string;
    };
}>> & {
    "onUpdate:modelValue"?: ((value: string[] | undefined) => any) | undefined;
    "onUpdate:max"?: ((value: number) => any) | undefined;
}, {
    max: number;
    getValueLabel: (value: number, max: number) => string;
}, {}>, {
    default?(_: {}): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
