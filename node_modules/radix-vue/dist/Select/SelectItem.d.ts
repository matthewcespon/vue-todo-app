import { type InjectionKey, type Ref } from 'vue';
import { type PrimitiveProps } from '../Primitive';
interface SelectItemContextValue {
    value: string;
    textId: string;
    disabled: Ref<boolean>;
    isSelected: Ref<boolean>;
    onItemTextChange(node: HTMLElement | undefined): void;
}
export declare const SELECT_ITEM_INJECTION_KEY: InjectionKey<SelectItemContextValue>;
export interface SelectItemProps extends PrimitiveProps {
    value: string;
    disabled?: boolean;
    textValue?: string;
}
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    value: {
        type: import("vue").PropType<string>;
        required: true;
    };
    disabled: {
        type: import("vue").PropType<boolean>;
    };
    textValue: {
        type: import("vue").PropType<string>;
    };
    asChild: {
        type: import("vue").PropType<boolean>;
    };
    as: {
        type: import("vue").PropType<import('../Primitive').AsTag>;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    value: {
        type: import("vue").PropType<string>;
        required: true;
    };
    disabled: {
        type: import("vue").PropType<boolean>;
    };
    textValue: {
        type: import("vue").PropType<string>;
    };
    asChild: {
        type: import("vue").PropType<boolean>;
    };
    as: {
        type: import("vue").PropType<import('../Primitive').AsTag>;
    };
}>>, {}, {}>, {
    default?(_: {}): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
