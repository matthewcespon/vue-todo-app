import type { InjectionKey, Ref } from 'vue';
export interface Measurable {
    getBoundingClientRect(): DOMRect;
}
interface PopperContextValue {
    anchor: Ref<Measurable | HTMLElement | undefined>;
    onAnchorChange(element: Measurable | HTMLElement | undefined): void;
}
export declare const POPPER_ROOT_KEY: InjectionKey<PopperContextValue>;
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{}, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>>, {}, {}>, {
    default?(_: {}): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
