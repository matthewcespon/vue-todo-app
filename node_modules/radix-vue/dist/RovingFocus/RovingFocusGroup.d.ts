import { type InjectionKey, type Ref } from 'vue';
import { type Direction, type Orientation } from './utils';
import { type PrimitiveProps } from '../Primitive';
export interface RovingFocusGroupProps extends PrimitiveProps {
    /**
     * The orientation of the group.
     * Mainly so arrow navigation is done accordingly (left & right vs. up & down)
     */
    orientation?: Orientation;
    /**
     * The direction of navigation between items.
     */
    dir?: Direction;
    /**
     * Whether keyboard navigation should loop around
     * @defaultValue false
     */
    loop?: boolean;
    currentTabStopId?: string | null;
    defaultCurrentTabStopId?: string;
}
export type RovingFocusGroupEmits = {
    'entryFocus': [event: Event];
    'update:currentTabStopId': [value: string | null | undefined];
};
interface RovingContextValue {
    orientation: Ref<Orientation | undefined>;
    dir: Ref<Direction>;
    loop: Ref<boolean>;
    currentTabStopId: Ref<string | null | undefined>;
    onItemFocus(tabStopId: string): void;
    onItemShiftTab(): void;
    onFocusableItemAdd(): void;
    onFocusableItemRemove(): void;
}
export declare const ROVING_FOCUS_INJECTION_KEY: InjectionKey<RovingContextValue>;
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    loop: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    dir: {
        type: import("vue").PropType<Direction>;
        default: string;
    };
    asChild: {
        type: import("vue").PropType<boolean>;
    };
    as: {
        type: import("vue").PropType<import('../Primitive').AsTag>;
    };
    orientation: {
        type: import("vue").PropType<Orientation>;
        default: undefined;
    };
    currentTabStopId: {
        type: import("vue").PropType<string | null>;
    };
    defaultCurrentTabStopId: {
        type: import("vue").PropType<string>;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    entryFocus: (event: Event) => void;
    'update:currentTabStopId': (value: string | null | undefined) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    loop: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    dir: {
        type: import("vue").PropType<Direction>;
        default: string;
    };
    asChild: {
        type: import("vue").PropType<boolean>;
    };
    as: {
        type: import("vue").PropType<import('../Primitive').AsTag>;
    };
    orientation: {
        type: import("vue").PropType<Orientation>;
        default: undefined;
    };
    currentTabStopId: {
        type: import("vue").PropType<string | null>;
    };
    defaultCurrentTabStopId: {
        type: import("vue").PropType<string>;
    };
}>> & {
    onEntryFocus?: ((event: Event) => any) | undefined;
    "onUpdate:currentTabStopId"?: ((value: string | null | undefined) => any) | undefined;
}, {
    loop: boolean;
    dir: Direction;
    orientation: Orientation;
}, {}>, {
    default?(_: {}): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
