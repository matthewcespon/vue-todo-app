import { type ComputedRef, type InjectionKey } from 'vue';
import { type RadioProps } from "./Radio";
export interface RadioGroupItemProps extends Omit<RadioProps, 'checked'> {
}
interface RadioItemProvideValue {
    disabled: ComputedRef<boolean>;
    checked: ComputedRef<boolean>;
}
export declare const RADIO_GROUP_ITEM_INJECTION_KEY: InjectionKey<RadioItemProvideValue>;
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    disabled: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    asChild: {
        type: import("vue").PropType<boolean>;
    };
    as: {
        type: import("vue").PropType<import('../Primitive').AsTag>;
        default: string;
    };
    value: {
        type: import("vue").PropType<string>;
    };
    required: {
        type: import("vue").PropType<boolean>;
    };
    id: {
        type: import("vue").PropType<string>;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    disabled: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    asChild: {
        type: import("vue").PropType<boolean>;
    };
    as: {
        type: import("vue").PropType<import('../Primitive').AsTag>;
        default: string;
    };
    value: {
        type: import("vue").PropType<string>;
    };
    required: {
        type: import("vue").PropType<boolean>;
    };
    id: {
        type: import("vue").PropType<string>;
    };
}>>, {
    disabled: boolean;
    as: import('../Primitive').AsTag;
}, {}>, {
    default?(_: {}): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
