import { type PrimitiveProps } from '../Primitive';
import type { ComputedRef, InjectionKey, Ref } from 'vue';
import type { DataOrientation, Direction, Type } from '../shared/types';
export interface AccordionRootProps extends PrimitiveProps {
    /**
     * Determines whether one or multiple items can be opened at the same time.
     */
    type: Type;
    /**
     * The controlled value of the item to expand when type is "single" or the controlled values of the items to expand when type is "multiple".
     */
    modelValue?: string | string[];
    /**
     * The default value of the item to expand when type is "single" or the default values of the items to expand when type is "multiple".
     * Use when you do not need to control the state of the item(s).
     */
    defaultValue?: string | string[];
    /**
     * When type is "single", allows closing content when clicking trigger for an open item.
     * When type is "multiple", this prop has no effect.
     *
     * @default false
     */
    collapsible?: boolean;
    /**
     * When true, prevents the user from interacting with the accordion and all its items
     *
     * @default false
     */
    disabled?: boolean;
    /**
     * The reading direction of the accordion when applicable. If omitted, assumes LTR (left-to-right) reading mode.
     *
     * @default "ltr"
     */
    dir?: Direction;
    /**
     * The orientation of the accordion.
     *
     * @default "vertical"
     */
    orientation?: DataOrientation;
}
export type AccordionRootEmits = {
    'update:modelValue': [value: string | string[] | undefined];
};
export declare const ACCORDION_INJECTION_KEY: InjectionKey<AccordionProvideValue>;
export interface AccordionProvideValue {
    disabled?: AccordionRootProps['disabled'];
    direction: AccordionRootProps['dir'];
    orientation: AccordionRootProps['orientation'];
    parentElement: Ref<HTMLElement | undefined>;
    changeModelValue(value: string): void;
    isSingle: ComputedRef<boolean>;
    modelValue: Ref<string | undefined | string[]>;
    collapsible: boolean;
}
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    dir: {
        type: import("vue").PropType<Direction>;
        default: string;
    };
    disabled: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    asChild: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    as: {
        type: import("vue").PropType<import('../Primitive').AsTag>;
    };
    type: {
        type: import("vue").PropType<Type>;
        required: true;
    };
    defaultValue: {
        type: import("vue").PropType<string | string[]>;
    };
    modelValue: {
        type: import("vue").PropType<string | string[]>;
    };
    collapsible: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    orientation: {
        type: import("vue").PropType<DataOrientation>;
        default: string;
    };
}, {
    modelValue: Ref<string | string[] | undefined>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    'update:modelValue': (value: string | string[] | undefined) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    dir: {
        type: import("vue").PropType<Direction>;
        default: string;
    };
    disabled: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    asChild: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    as: {
        type: import("vue").PropType<import('../Primitive').AsTag>;
    };
    type: {
        type: import("vue").PropType<Type>;
        required: true;
    };
    defaultValue: {
        type: import("vue").PropType<string | string[]>;
    };
    modelValue: {
        type: import("vue").PropType<string | string[]>;
    };
    collapsible: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    orientation: {
        type: import("vue").PropType<DataOrientation>;
        default: string;
    };
}>> & {
    "onUpdate:modelValue"?: ((value: string | string[] | undefined) => any) | undefined;
}, {
    dir: Direction;
    disabled: boolean;
    asChild: boolean;
    collapsible: boolean;
    orientation: DataOrientation;
}, {}>, {
    default?(_: {
        modelValue: string | string[] | undefined;
    }): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
