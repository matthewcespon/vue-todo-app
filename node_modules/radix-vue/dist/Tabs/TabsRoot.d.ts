import { type PrimitiveProps } from '../Primitive';
export interface TabsRootProps extends PrimitiveProps {
    defaultValue?: string;
    /**
     * The orientation the tabs are layed out.
     * Mainly so arrow navigation is done accordingly (left & right vs. up & down)
     * @defaultValue horizontal
     */
    orientation?: DataOrientation;
    /**
     * The direction of navigation between toolbar items.
     */
    dir?: Direction;
    /**
     * Whether a tab is activated automatically or manually.
     * @defaultValue automatic
     * */
    activationMode?: 'automatic' | 'manual';
    modelValue?: string;
}
export type TabsRootEmits = {
    'update:modelValue': [payload: string];
};
export interface TabsProvideValue {
    modelValue: Ref<string | undefined>;
    changeModelValue: (value: string) => void;
    orientation: Ref<DataOrientation>;
    dir: Ref<Direction>;
    activationMode: 'automatic' | 'manual';
    baseId: string;
}
import type { InjectionKey, Ref } from 'vue';
import type { DataOrientation, Direction } from '../shared/types';
export declare const TABS_INJECTION_KEY: InjectionKey<TabsProvideValue>;
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    dir: {
        type: import("vue").PropType<Direction>;
        default: string;
    };
    asChild: {
        type: import("vue").PropType<boolean>;
    };
    as: {
        type: import("vue").PropType<import('../Primitive').AsTag>;
    };
    defaultValue: {
        type: import("vue").PropType<string>;
    };
    modelValue: {
        type: import("vue").PropType<string>;
    };
    orientation: {
        type: import("vue").PropType<DataOrientation>;
        default: string;
    };
    activationMode: {
        type: import("vue").PropType<"automatic" | "manual">;
        default: string;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    'update:modelValue': (payload: string) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    dir: {
        type: import("vue").PropType<Direction>;
        default: string;
    };
    asChild: {
        type: import("vue").PropType<boolean>;
    };
    as: {
        type: import("vue").PropType<import('../Primitive').AsTag>;
    };
    defaultValue: {
        type: import("vue").PropType<string>;
    };
    modelValue: {
        type: import("vue").PropType<string>;
    };
    orientation: {
        type: import("vue").PropType<DataOrientation>;
        default: string;
    };
    activationMode: {
        type: import("vue").PropType<"automatic" | "manual">;
        default: string;
    };
}>> & {
    "onUpdate:modelValue"?: ((payload: string) => any) | undefined;
}, {
    dir: Direction;
    orientation: DataOrientation;
    activationMode: "automatic" | "manual";
}, {}>, {
    default?(_: {}): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
