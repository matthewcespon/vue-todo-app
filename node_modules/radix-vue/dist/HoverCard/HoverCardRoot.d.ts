import type { InjectionKey, Ref } from 'vue';
export interface HoverCardRootProps {
    defaultOpen?: false;
    open?: boolean;
    openDelay?: number;
    closeDelay?: number;
}
export type HoverCardRootEmits = {
    'update:open': [value: boolean];
};
export declare const HOVER_CARD_INJECTION_KEY: InjectionKey<HoverCardProvideValue>;
export interface HoverCardProvideValue {
    open: Ref<boolean>;
    onOpenChange(open: boolean): void;
    onOpen(): void;
    onClose(): void;
    onDismiss(): void;
    hasSelectionRef: Ref<boolean>;
    isPointerDownOnContentRef: Ref<boolean>;
}
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    defaultOpen: {
        type: import("vue").PropType<false>;
        default: boolean;
    };
    open: {
        type: import("vue").PropType<boolean>;
        default: undefined;
    };
    openDelay: {
        type: import("vue").PropType<number>;
        default: number;
    };
    closeDelay: {
        type: import("vue").PropType<number>;
        default: number;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    'update:open': (value: boolean) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    defaultOpen: {
        type: import("vue").PropType<false>;
        default: boolean;
    };
    open: {
        type: import("vue").PropType<boolean>;
        default: undefined;
    };
    openDelay: {
        type: import("vue").PropType<number>;
        default: number;
    };
    closeDelay: {
        type: import("vue").PropType<number>;
        default: number;
    };
}>> & {
    "onUpdate:open"?: ((value: boolean) => any) | undefined;
}, {
    defaultOpen: false;
    open: boolean;
    openDelay: number;
    closeDelay: number;
}, {}>, {
    default?(_: {}): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
