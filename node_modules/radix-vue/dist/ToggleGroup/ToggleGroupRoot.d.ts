import { type PrimitiveProps } from '../Primitive';
import type { InjectionKey, Ref } from 'vue';
import type { DataOrientation, Direction } from '../shared/types';
type TypeEnum = 'single' | 'multiple';
export interface ToggleGroupRootProps extends PrimitiveProps {
    type?: TypeEnum;
    defaultValue?: string | string[];
    modelValue?: string | string[];
    rovingFocus?: boolean;
    disabled?: boolean;
    orientation?: DataOrientation;
    dir?: Direction;
    loop?: boolean;
}
export type ToggleGroupRootEmits = {
    'update:modelValue': [payload: string];
};
export declare const TOGGLE_GROUP_INJECTION_KEY: InjectionKey<ToggleGroupProvideValue>;
interface ToggleGroupProvideValue {
    type: TypeEnum;
    modelValue: Ref<string | string[] | undefined>;
    changeModelValue: (value: string) => void;
    dir?: Ref<Direction>;
    orientation?: DataOrientation;
    loop: Ref<boolean>;
    rovingFocus: Ref<boolean>;
    disabled?: Ref<boolean>;
}
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    loop: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    dir: {
        type: import("vue").PropType<Direction>;
        default: string;
    };
    disabled: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    asChild: {
        type: import("vue").PropType<boolean>;
    };
    as: {
        type: import("vue").PropType<import('../Primitive').AsTag>;
    };
    type: {
        type: import("vue").PropType<TypeEnum>;
        default: string;
    };
    defaultValue: {
        type: import("vue").PropType<string | string[]>;
    };
    modelValue: {
        type: import("vue").PropType<string | string[]>;
    };
    orientation: {
        type: import("vue").PropType<DataOrientation>;
        default: string;
    };
    rovingFocus: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    'update:modelValue': (payload: string) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    loop: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    dir: {
        type: import("vue").PropType<Direction>;
        default: string;
    };
    disabled: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    asChild: {
        type: import("vue").PropType<boolean>;
    };
    as: {
        type: import("vue").PropType<import('../Primitive').AsTag>;
    };
    type: {
        type: import("vue").PropType<TypeEnum>;
        default: string;
    };
    defaultValue: {
        type: import("vue").PropType<string | string[]>;
    };
    modelValue: {
        type: import("vue").PropType<string | string[]>;
    };
    orientation: {
        type: import("vue").PropType<DataOrientation>;
        default: string;
    };
    rovingFocus: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
}>> & {
    "onUpdate:modelValue"?: ((payload: string) => any) | undefined;
}, {
    loop: boolean;
    dir: Direction;
    disabled: boolean;
    type: TypeEnum;
    orientation: DataOrientation;
    rovingFocus: boolean;
}, {}>, {
    default?(_: {
        modelValue: string | string[] | undefined;
    }): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
