import type { InjectionKey, Ref } from 'vue';
export interface DialogRootProps {
    open?: boolean;
    defaultOpen?: boolean;
    modal?: boolean;
}
export type DialogRootEmits = {
    'update:open': [value: boolean];
};
export declare const DIALOG_INJECTION_KEY: InjectionKey<DialogProvideValue>;
export interface DialogProvideValue {
    open: Readonly<Ref<boolean>>;
    modal: Ref<boolean>;
    openModal(): void;
    onOpenChange(value: boolean): void;
    onOpenToggle(): void;
    triggerElement: Ref<HTMLElement | undefined>;
    contentElement: Ref<HTMLElement | undefined>;
    contentId: string;
    titleId: string;
    descriptionId: string;
}
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    defaultOpen: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    open: {
        type: import("vue").PropType<boolean>;
        default: undefined;
    };
    modal: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    'update:open': (value: boolean) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    defaultOpen: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    open: {
        type: import("vue").PropType<boolean>;
        default: undefined;
    };
    modal: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
}>> & {
    "onUpdate:open"?: ((value: boolean) => any) | undefined;
}, {
    defaultOpen: boolean;
    open: boolean;
    modal: boolean;
}, {}>, {
    default?(_: {}): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
