import type { InjectionKey, Ref } from 'vue';
export interface PopoverRootProps {
    /**
     * The open state of the popover when it is initially rendered. Use when you do not need to control its open state.
     */
    defaultOpen?: boolean;
    /**
     * The controlled open state of the popover.
     */
    open?: boolean;
    /**
     * The modality of the popover. When set to true, interaction with outside elements will be disabled and only popover content will be visible to screen readers.
     *
     * @default false
     */
    modal?: boolean;
}
export type PopoverRootEmits = {
    'update:open': [value: boolean];
};
export declare const POPOVER_INJECTION_KEY: InjectionKey<PopoverProvideValue>;
export interface PopoverProvideValue {
    triggerElement: Ref<HTMLElement | undefined>;
    contentId: string;
    open: Ref<boolean>;
    modal: Ref<boolean>;
    onOpenChange(value: boolean): void;
    onOpenToggle(): void;
    hasCustomAnchor: Ref<boolean>;
}
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    defaultOpen: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    open: {
        type: import("vue").PropType<boolean>;
        default: undefined;
    };
    modal: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    'update:open': (value: boolean) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    defaultOpen: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    open: {
        type: import("vue").PropType<boolean>;
        default: undefined;
    };
    modal: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
}>> & {
    "onUpdate:open"?: ((value: boolean) => any) | undefined;
}, {
    defaultOpen: boolean;
    open: boolean;
    modal: boolean;
}, {}>, {
    default?(_: {}): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
