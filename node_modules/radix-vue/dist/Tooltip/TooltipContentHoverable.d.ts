declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    ariaLabel: {
        type: import("vue").PropType<string>;
    };
    asChild: {
        type: import("vue").PropType<boolean>;
    };
    as: {
        type: import("vue").PropType<import('../Primitive').AsTag>;
    };
    sticky: {
        type: import("vue").PropType<"partial" | "always">;
    };
    side: {
        type: import("vue").PropType<"right" | "left" | "bottom" | "top">;
    };
    align: {
        type: import("vue").PropType<"end" | "center" | "start">;
    };
    sideOffset: {
        type: import("vue").PropType<number>;
    };
    alignOffset: {
        type: import("vue").PropType<number>;
    };
    avoidCollisions: {
        type: import("vue").PropType<boolean>;
    };
    collisionBoundary: {
        type: import("vue").PropType<Element | (Element | null)[] | null>;
    };
    collisionPadding: {
        type: import("vue").PropType<number | Partial<Record<"right" | "left" | "bottom" | "top", number>>>;
    };
    arrowPadding: {
        type: import("vue").PropType<number>;
    };
    hideWhenDetached: {
        type: import("vue").PropType<boolean>;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    ariaLabel: {
        type: import("vue").PropType<string>;
    };
    asChild: {
        type: import("vue").PropType<boolean>;
    };
    as: {
        type: import("vue").PropType<import('../Primitive').AsTag>;
    };
    sticky: {
        type: import("vue").PropType<"partial" | "always">;
    };
    side: {
        type: import("vue").PropType<"right" | "left" | "bottom" | "top">;
    };
    align: {
        type: import("vue").PropType<"end" | "center" | "start">;
    };
    sideOffset: {
        type: import("vue").PropType<number>;
    };
    alignOffset: {
        type: import("vue").PropType<number>;
    };
    avoidCollisions: {
        type: import("vue").PropType<boolean>;
    };
    collisionBoundary: {
        type: import("vue").PropType<Element | (Element | null)[] | null>;
    };
    collisionPadding: {
        type: import("vue").PropType<number | Partial<Record<"right" | "left" | "bottom" | "top", number>>>;
    };
    arrowPadding: {
        type: import("vue").PropType<number>;
    };
    hideWhenDetached: {
        type: import("vue").PropType<boolean>;
    };
}>>, {}, {}>, {
    default?(_: {}): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
