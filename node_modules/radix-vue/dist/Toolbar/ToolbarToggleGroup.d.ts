import { type ToggleGroupRootEmits, type ToggleGroupRootProps } from '../ToggleGroup';
export interface ToolbarToggleGroupProps extends ToggleGroupRootProps {
}
export type ToolbarToggleGroupEmits = ToggleGroupRootEmits;
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    type: {
        type: import("vue").PropType<"single" | "multiple">;
    };
    defaultValue: {
        type: import("vue").PropType<string | string[]>;
    };
    modelValue: {
        type: import("vue").PropType<string | string[]>;
    };
    rovingFocus: {
        type: import("vue").PropType<boolean>;
    };
    disabled: {
        type: import("vue").PropType<boolean>;
    };
    orientation: {
        type: import("vue").PropType<import("../shared/types").DataOrientation>;
    };
    dir: {
        type: import("vue").PropType<import("../shared/types").Direction>;
    };
    loop: {
        type: import("vue").PropType<boolean>;
    };
    asChild: {
        type: import("vue").PropType<boolean>;
    };
    as: {
        type: import("vue").PropType<import("../Primitive").AsTag>;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    'update:modelValue': (payload: string) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    type: {
        type: import("vue").PropType<"single" | "multiple">;
    };
    defaultValue: {
        type: import("vue").PropType<string | string[]>;
    };
    modelValue: {
        type: import("vue").PropType<string | string[]>;
    };
    rovingFocus: {
        type: import("vue").PropType<boolean>;
    };
    disabled: {
        type: import("vue").PropType<boolean>;
    };
    orientation: {
        type: import("vue").PropType<import("../shared/types").DataOrientation>;
    };
    dir: {
        type: import("vue").PropType<import("../shared/types").Direction>;
    };
    loop: {
        type: import("vue").PropType<boolean>;
    };
    asChild: {
        type: import("vue").PropType<boolean>;
    };
    as: {
        type: import("vue").PropType<import("../Primitive").AsTag>;
    };
}>> & {
    "onUpdate:modelValue"?: ((payload: string) => any) | undefined;
}, {}, {}>, {
    default?(_: {}): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
