import { type PrimitiveProps } from '../Primitive';
import type { InjectionKey, Ref } from 'vue';
import type { DataOrientation, Direction } from '../shared/types';
export interface ToolbarRootProps extends PrimitiveProps {
    orientation?: DataOrientation;
    dir?: Direction;
    loop?: boolean;
}
export declare const TOOLBAR_INJECTION_KEY: InjectionKey<ToolbarProvideValue>;
export interface ToolbarProvideValue {
    orientation: Ref<DataOrientation>;
    dir: Ref<Direction>;
}
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    loop: {
        type: import("vue").PropType<boolean>;
    };
    dir: {
        type: import("vue").PropType<Direction>;
        default: string;
    };
    asChild: {
        type: import("vue").PropType<boolean>;
    };
    as: {
        type: import("vue").PropType<import('../Primitive').AsTag>;
    };
    orientation: {
        type: import("vue").PropType<DataOrientation>;
        default: string;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    loop: {
        type: import("vue").PropType<boolean>;
    };
    dir: {
        type: import("vue").PropType<Direction>;
        default: string;
    };
    asChild: {
        type: import("vue").PropType<boolean>;
    };
    as: {
        type: import("vue").PropType<import('../Primitive').AsTag>;
    };
    orientation: {
        type: import("vue").PropType<DataOrientation>;
        default: string;
    };
}>>, {
    dir: Direction;
    orientation: DataOrientation;
}, {}>, {
    default?(_: {}): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
