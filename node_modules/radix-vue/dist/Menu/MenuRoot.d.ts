import { type InjectionKey, type Ref } from 'vue';
import { type Direction } from './utils';
export interface MenuContextValue {
    open: Ref<boolean>;
    onOpenChange(open: boolean): void;
    content: Ref<HTMLElement | undefined>;
    onContentChange(content: HTMLElement | undefined): void;
}
export interface MenuRootContextValue {
    onClose(): void;
    dir: Ref<Direction>;
    isUsingKeyboardRef: Ref<boolean>;
    modal: Ref<boolean>;
}
export interface MenuProps {
    open?: boolean;
    onOpenChange?(open: boolean): void;
    dir?: Direction;
    modal?: boolean;
}
export declare const MENU_INJECTION_KEY: InjectionKey<MenuContextValue>;
export declare const MENU_ROOT_INJECTION_KEY: InjectionKey<MenuRootContextValue>;
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    dir: {
        type: import("vue").PropType<Direction>;
        default: string;
    };
    open: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    onOpenChange: {
        type: import("vue").PropType<(open: boolean) => void>;
    };
    modal: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    'update:open': (payload: boolean) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    dir: {
        type: import("vue").PropType<Direction>;
        default: string;
    };
    open: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    onOpenChange: {
        type: import("vue").PropType<(open: boolean) => void>;
    };
    modal: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
}>> & {
    "onUpdate:open"?: ((payload: boolean) => any) | undefined;
}, {
    dir: Direction;
    open: boolean;
    modal: boolean;
}, {}>, {
    default?(_: {}): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
