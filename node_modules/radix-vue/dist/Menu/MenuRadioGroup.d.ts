import { type InjectionKey, type Ref } from 'vue';
import { type MenuGroupProps } from "./MenuGroup";
export interface MenuRadioGroupProps extends MenuGroupProps {
    modelValue?: string;
}
export type MenuRadioGroupEmits = {
    'update:modelValue': [payload: boolean];
};
interface MenuRadioGroupContextValue {
    modelValue: Ref<string>;
    onValueChange: (payload: string) => void;
}
export declare const MENU_RADIO_GROUP_INJECTION_KEY: InjectionKey<MenuRadioGroupContextValue>;
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    asChild: {
        type: import("vue").PropType<boolean>;
    };
    as: {
        type: import("vue").PropType<import("../Primitive").AsTag>;
    };
    modelValue: {
        type: import("vue").PropType<string>;
        default: string;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    'update:modelValue': (payload: boolean) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    asChild: {
        type: import("vue").PropType<boolean>;
    };
    as: {
        type: import("vue").PropType<import("../Primitive").AsTag>;
    };
    modelValue: {
        type: import("vue").PropType<string>;
        default: string;
    };
}>> & {
    "onUpdate:modelValue"?: ((payload: boolean) => any) | undefined;
}, {
    modelValue: string;
}, {}>, {
    default?(_: {}): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
