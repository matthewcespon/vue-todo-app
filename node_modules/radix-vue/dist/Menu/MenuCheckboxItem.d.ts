import { type CheckedState } from './utils';
import { type MenuItemEmits, type MenuItemProps } from "./MenuItem";
export interface MenuCheckboxItemProps extends MenuItemProps {
    checked?: CheckedState;
}
export type MenuCheckboxItemEmits = MenuItemEmits & {
    'update:checked': [payload: boolean];
};
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    disabled: {
        type: import("vue").PropType<boolean>;
    };
    asChild: {
        type: import("vue").PropType<boolean>;
    };
    as: {
        type: import("vue").PropType<import("../Primitive").AsTag>;
    };
    checked: {
        type: import("vue").PropType<CheckedState>;
        default: boolean;
    };
    textValue: {
        type: import("vue").PropType<string>;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    select: (event: Event) => void;
    'update:checked': (payload: boolean) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    disabled: {
        type: import("vue").PropType<boolean>;
    };
    asChild: {
        type: import("vue").PropType<boolean>;
    };
    as: {
        type: import("vue").PropType<import("../Primitive").AsTag>;
    };
    checked: {
        type: import("vue").PropType<CheckedState>;
        default: boolean;
    };
    textValue: {
        type: import("vue").PropType<string>;
    };
}>> & {
    onSelect?: ((event: Event) => any) | undefined;
    "onUpdate:checked"?: ((payload: boolean) => any) | undefined;
}, {
    checked: CheckedState;
}, {}>, {
    default?(_: {}): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
