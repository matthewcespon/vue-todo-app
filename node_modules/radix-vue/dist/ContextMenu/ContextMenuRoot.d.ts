import type { InjectionKey, Ref } from 'vue';
import type { Direction } from '../shared/types';
interface ContextMenuContextValue {
    open: Ref<boolean>;
    onOpenChange(open: boolean): void;
    modal: Ref<boolean>;
    dir: Ref<Direction>;
}
export declare const CONTEXT_MENU_INJECTION_KEY: InjectionKey<ContextMenuContextValue>;
export interface ContextMenuRootProps {
    dir?: Direction;
    modal?: boolean;
}
export type ContextMenuRootEmits = {
    'update:open': [value: boolean];
};
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    dir: {
        type: import("vue").PropType<Direction>;
        default: string;
    };
    modal: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    'update:open': (value: boolean) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    dir: {
        type: import("vue").PropType<Direction>;
        default: string;
    };
    modal: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
}>> & {
    "onUpdate:open"?: ((value: boolean) => any) | undefined;
}, {
    dir: Direction;
    modal: boolean;
}, {}>, {
    default?(_: {}): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
